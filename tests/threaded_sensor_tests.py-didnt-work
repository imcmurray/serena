#!/usr/bin/python

import threading
import time
import math
import grovepi
import sys
import signal
import os
import subprocess
import RPi.GPIO as GPIO
import logging

thread_stopper = threading.Event()

# Define Globals
#io = {'input': {'dial': '0', 'power': '21', 'button': '2', 'water': '2', 'pir': '7', 'dht': '8'}, 'output': {'buzzer': '3', 'rled': '6', 'lcd': '2', 'gled': '5'}}
io = {'input': {'dial': '0', 'pir': '3', 'button': '2', 'dht': '4', 'power': '21' }, 'output': {'buzzer': '3', 'rled': '6', 'lcd': '2', 'gled': '5'}}
sensors = {}


def reset():
	global thread_stopper
	print 'Hit reset'
	thread_stopper.set()
        sys.exit()


def set_io_ports():
	global io

	for stype in io:
		for sname in io[stype]:
			if stype == 'input' and sname == 'power':
				print 'set power'
               			#GPIO.setmode(GPIO.BOARD)
               			GPIO.setmode(GPIO.BCM)
		                GPIO.setwarnings(False)
		                GPIO.setup(int(io[stype][sname]), GPIO.IN, pull_up_down=GPIO.PUD_UP)
			else:
				print '[%s] Setup: %s on port %s'% (stype, sname, int(io[stype][sname]))
               			grovepi.pinMode(int(io[stype][sname]), stype)


def thread_dht_monitor():
	global io,sensors

	while thread_stopper.is_set() is False:

		time.sleep(1)
	        [ temp,hume ] = grovepi.dht(int(io['input']['dht']),1)
		time.sleep(1)
	        [ temp,hume ] = grovepi.dht(int(io['input']['dht']),1)
		time.sleep(1)
	        t = str(temp)
	        h = str(hume)
	        t.rstrip("0")
	        h.rstrip("0")
		#sensors['temperature'] = float(sensorTemp)
		sensors['temperatureC'] = float(t)
		sensors['temperatureF'] = float("{0:.2f}".format((float(t) * 9.0 / 5.0) + 32))
		sensors['humidity'] = float(h)
		time.sleep(1)
	print "Stopping thread_dht_monitor"

def thread_sensors_reporter():
	global sensors

	while thread_stopper.is_set() is False:
		print 'Sensors: %s'% sensors
		
		#while ( epoch == int(time.time())):
		time.sleep(0.5)
	print "Stopping thread_sensors_reporter"


def start_threads():
	global thread_stopper,sensors

	dht_thread = threading.Thread(target = thread_dht_monitor)
	#dht_thread.daemon = True
	dht_thread.start()
	pir_thread = threading.Thread(target = thread_pir_monitor)
	#pir_thread.daemon = True
	pir_thread.start()
	button_thread = threading.Thread(target = thread_button_monitor)
	#button_thread.daemon = True
	button_thread.start()
	power_thread = threading.Thread(target = thread_power_monitor)
	#power_thread.daemon = True
	power_thread.start()

	if 'water' in io['input']:
		water_thread = threading.Thread(target = thread_water_monitor)
		#water_thread.daemon = True
		water_thread.start()

	# start sensor report thread
	reporter_thread = threading.Thread(target = thread_sensors_reporter)
	#reporter_thread.daemon = True
	reporter_thread.start()



def thread_button_monitor():
	global io,sensors

	while thread_stopper.is_set() is False:

		if grovepi.digitalRead(int(io['input']['button'])):
			sensors['button'] = 1
		else:
			sensors['button'] = 0
		time.sleep(.5)
	print "Stopping thread_button_monitor"


def thread_water_monitor():
	global io,sensors

	while thread_stopper.is_set() is False:

		if grovepi.digitalRead(int(io['input']['water'])):
			sensors['water'] = 0
		else:
			sensors['water'] = 1
		time.sleep(.5)
	print "Stopping thread_water_monitor"


def thread_power_monitor():
	global io,sensors

	while thread_stopper.is_set() is False:
		# A sensor value of 1 indicates a loss of power
		if GPIO.input(int(io['input']['power'])):
			sensors['power'] = 1
		else:
			sensors['power'] = 0
		time.sleep(1)
	print "Stopping thread_power_monitor"


def check_motion():
	global io
	# A return value of 1 indicates motion was detected
	if grovepi.digitalRead(int(io['input']['pir'])):
		return 1
	else:
		return 0

def thread_pir_monitor():
	global io,sensors

	while thread_stopper.is_set() is False:

		if grovepi.digitalRead(int(io['input']['pir'])):
			sensors['motion'] = 1
		else:
			sensors['motion'] = 0
		time.sleep(1)
	print "Stopping thread_pir_monitor"




def check_serena_hotness():
	p = subprocess.Popen(['cat', '/sys/class/thermal/thermal_zone0/temp'], stdout=subprocess.PIPE)
	cpuTemp = float(p.communicate()[0].rstrip())/1000
	cleanCpuTemp = float("{0:.1f}".format(cpuTemp))
	if not math.isnan(cpuTemp):
		if int(cpuTemp) > 0 and int(cpuTemp) < 100:
			#print 'returning cpu Temp of: >%.1f<'% cpuTemp
			return cleanCpuTemp
		else:
			return 0
	else:
		return 0
	time.sleep(1)


	
def cycle_sensors():
	global r_server, execution, redis_sensor_path

	# create sensor dictionary and set epoch
	sensors = {'epoch': int(time.time())}

	# Temperature and Humidty capture - everything becomes a float!
	sensors['serenaTemp'] = check_serena_hotness()
	if 'dht' in io['input']:
		sensorTemp, sensorHum = check_dht()
		#sensors['temperature'] = float(sensorTemp)
		sensors['temperatureC'] = float(sensorTemp)
		sensors['temperatureF'] = float("{0:.2f}".format((float(sensorTemp) * 9.0 / 5.0) + 32))
		sensors['humidity'] = float(sensorHum)

	if 'power' in io['input']:
		# Power status capture
		sensors['power'] = check_power()

	if 'water' in io['input']:
		# Water detection capture
		sensors['water'] = check_water()

	if 'button' in io['input']:
		# button detection capture
		sensors['button'] = check_button()

	if 'pir' in io['input']:
		# Motion detection capture
		sensors['motion'] = check_motion()

	if 'power' in io['input']:
		# Power status capture
		sensors['power'] = check_power()

	# What is our sensors dictionary looking like?
	print "  sensors: %s"% sensors

	# This is just a temporary work around at the moment.
	#
	while (sensors['epoch']+1 > int(time.time())):
		#print "%s > %s?"% (sensors['epoch']+5, int(time.time()))
		time.sleep(0.1)



def doLoop():
	thread_dht = 0
	global thread_stopper
	while True:
		try:
			#cycle_sensors()
			if thread_dht == 0:
				start_threads()
				thread_dht = 1
		except IOError:
			print "Error"
		except KeyboardInterrupt:
			print "Exit requested"
			reset()
		except SystemExit:
			print "System Exit requested"
			reset()
		except TypeError:
			print "Type Error!"

def sigterm_handler(signum, frame):
        print >> sys.stderr, "Exit received"
        sys.exit(0)

# Bind our callback to the SIGTERM signal
signal.signal(signal.SIGTERM, sigterm_handler)

if __name__ == '__main__':
	try:
		set_io_ports()
		doLoop()
	except IOError:
		print "Error"
	except KeyboardInterrupt:
		print "Exit requested"
		reset()
	except SystemExit:
		print "System Exit requested"
		reset()
	except TypeError:
		print "Type Error!"

